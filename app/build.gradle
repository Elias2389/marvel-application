plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'jacoco'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.ae.marvelapplication"
        targetSdkVersion 31
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        debug {
            buildConfigField "String", "BASE_URL", BASE_URL
            buildConfigField "String", "API_KEY", MARVEL_API_KEY
            buildConfigField "String", "PRIVATE_KEY", MARVEL_PRIVATE_KEY
            testCoverageEnabled true
        }
        release {
            buildConfigField "String", "BASE_URL", BASE_URL
            buildConfigField "String", "API_KEY", MARVEL_API_KEY
            buildConfigField "String", "PRIVATE_KEY", MARVEL_PRIVATE_KEY
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Android activity ktx
    implementation "androidx.activity:activity-ktx:$ktx_version"
    implementation "androidx.fragment:fragment-ktx:$ktx_version"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_life_cycle_version"

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$ktx_life_cycle_version"

    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ktx_life_cycle_version"

    // Dagger
    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_version"

    // retrofit
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofi_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofi_version"
    implementation "com.squareup.okhttp3:okhttp:$ok_http_version"
    implementation "com.squareup.okio:okio:$okio_version"

    // Moshi

    implementation("com.squareup.moshi:moshi:$moshi_version")
    implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
    kapt"com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation"com.squareup.retrofit2:converter-moshi:$moshi_converter_version"

    //Coil
    implementation"io.coil-kt:coil:$coil_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Timber logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_component_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_component_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    // Testing //

    // Junit
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_test_impl_version"
    androidTestImplementation "androidx.test.ext:junit-ktx:$junit_ktx_version"

    testImplementation "androidx.arch.core:core-testing:$arch_core_testing"

    // Room
    androidTestImplementation "androidx.room:room-testing:$room_version"

    testImplementation "androidx.test.ext:junit:$test_ext_version"

    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$expresso_core_version"

    // Coroutines
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"

    // Robo electric
    testImplementation "org.robolectric:robolectric:$roboelectrict_version"

    // Mockk
    testImplementation "io.mockk:mockk:$mockk_version"

    // Fragment
    debugImplementation "androidx.fragment:fragment-testing:$fragment_ktx_version"

    // Rules
    androidTestImplementation "androidx.test:rules:1.4.0"
}