plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id("io.gitlab.arturbosch.detekt").version("1.19.0")
}

android {
    compileSdk 31
    resourcePrefix 'character_app'
    defaultConfig {
        applicationId "com.ae.marvelapplication"
        targetSdkVersion 31
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.ae.marvelapplication.util.CustomTestRunner"
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    buildTypes {
        debug {
            buildConfigField "String", "BASE_URL", BASE_URL
            buildConfigField "String", "API_KEY", MARVEL_API_KEY
            buildConfigField "String", "PRIVATE_KEY", MARVEL_PRIVATE_KEY
            testCoverageEnabled true
            minifyEnabled false
        }
        release {
            buildConfigField "String", "BASE_URL", BASE_URL
            buildConfigField "String", "API_KEY", MARVEL_API_KEY
            buildConfigField "String", "PRIVATE_KEY", MARVEL_PRIVATE_KEY
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }
    hilt {
        enableTransformForLocalTests = true
    }

}

detekt {
    toolVersion = "1.19.0"
    config = files("config/detekt/detekt.yml")
    buildUponDefaultConfig = true
}

def projectSource = file(projectDir)
def configFile = files("$rootDir/config/detekt/detekt.yml")
def baselineFile = file("$rootDir/config/detekt/baseline.xml")
def kotlinFiles = "**/*.kt"
def resourceFiles = "**/resources/**"
def buildFiles = "**/build/**"

apply plugin: 'io.gitlab.arturbosch.detekt'

tasks.register("detektAll", io.gitlab.arturbosch.detekt.Detekt) {
    def autoFix = project.hasProperty('detektAutoFix')

    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    autoCorrect = autoFix
    buildUponDefaultConfig = true
    setSource(projectSource)
    baseline.set(baselineFile)
    config.setFrom(configFile)
    include(kotlinFiles)
    exclude(resourceFiles, buildFiles)
    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = false
    }
}

tasks.register("detektGenerateBaseline", io.gitlab.arturbosch.detekt.DetektCreateBaselineTask) {
    description = "Custom DETEKT build to build baseline for all modules"
    parallel = true
    ignoreFailures = false
    buildUponDefaultConfig = true
    setSource(projectSource)
    baseline.set(baselineFile)
    config.setFrom(configFile)
    include(kotlinFiles)
    exclude(resourceFiles, buildFiles)
}

kapt {
    correctErrorTypes true
    javacOptions {
        // These options are normally set automatically via the Hilt Gradle plugin, but we
        // set them manually to workaround a bug in the Kotlin 1.5.20
        option("-Adagger.fastInit=ENABLED")
        option("-Adagger.hilt.android.internal.disableAndroidSuperclassValidation=true")
    }
}

dependencies {
    implementation project(":domain")
    implementation project(":data")
    implementation project(":usecase")
    implementation project(":framework:databasemanager")
    implementation project(":framework:requestmanager")

    implementation "androidx.core:core-ktx:$coreKtxversion"
    implementation "androidx.appcompat:appcompat:$app_compact_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Android activity ktx
    implementation "androidx.activity:activity-ktx:$ktx_version"
    implementation "androidx.fragment:fragment-ktx:$ktx_version"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_life_cycle_version"

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$ktx_life_cycle_version"

    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ktx_life_cycle_version"

    implementation "androidx.test:runner:$test_runner_version"

    // Dagger
    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-compiler:$dagger_version"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"

    //Coil
    implementation "io.coil-kt:coil:$coil_version"

    // Timber logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Groupie
    implementation "com.github.lisawray.groupie:groupie:$groupie_version"
    implementation "com.github.lisawray.groupie:groupie-viewbinding:$groupie_version"

    // Testing //

    // Junit
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_test_impl_version"
    androidTestImplementation "androidx.test.ext:junit-ktx:$junit_ktx_version"

    testImplementation "androidx.arch.core:core-testing:$arch_core_testing"

    // Dagger Hilt
    // For instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$dagger_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$dagger_version"

    // For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:$dagger_version"
    kaptTest "com.google.dagger:hilt-compiler:$dagger_version"

    // Hamcrest
    testImplementation "org.hamcrest:hamcrest:$hamcrest_version"

    // Mock Web Server
    testImplementation "com.squareup.okhttp3:mockwebserver:$mock_web_server"


    // Roboelectric
    testImplementation "org.robolectric:robolectric:$roboelectrict_version"

    testImplementation "androidx.test.ext:junit:$test_ext_version"

    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$expresso_core_version"
    testImplementation "androidx.test.espresso:espresso-core:$expresso_core_version"
    testImplementation "androidx.test.espresso:espresso-contrib:$expresso_core_version"
    testImplementation "androidx.test.espresso:espresso-intents:$expresso_core_version"
    testImplementation "com.google.truth:truth:$truth_version"

    // Coroutines
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"

    // Robo electric
    testImplementation "org.robolectric:robolectric:$roboelectrict_version"

    // Mockk
    testImplementation "io.mockk:mockk:$mockk_version"

    // Fragment
    debugImplementation "androidx.fragment:fragment-testing:$fragment_ktx_version"

    // Rules
    androidTestImplementation "androidx.test:rules:$test_rules_version"
}